import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';final controllerProvider = StateNotifierProvider<Controller, List<Future<String>>>((ref) => Controller(ref.read));final futureProvider = FutureProvider.autoDispose.family<String, String>((ref, str) async {  final ret = await Future.delayed(const Duration(seconds: 1), () => str);  ref.maintainState = true;  return ret;});class Controller extends StateNotifier<List<Future<String>>> {  Controller(this._read) : super([]);  final Reader _read;  void add(String str) {    final f = _read(futureProvider(str).future);    state = [f, ...state];  }}Future<void> main() async {  WidgetsFlutterBinding.ensureInitialized();  return runApp(    const ProviderScope(      child: MaterialApp(        home: HomeScreen(),      ),    ),  );}class HomeScreen extends ConsumerWidget {  const HomeScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context, WidgetRef ref) {    final items = ref.watch(controllerProvider);    return Scaffold(      floatingActionButton: FloatingActionButton(        onPressed: () {          ref.read(controllerProvider.notifier).add("example");        },        child: const Icon(Icons.add),      ),      body: ListView.builder(        itemCount: items.length,        itemBuilder: (context, index) {          return FutureBuilder(            future: items[index],            builder: (context, snapshot) {              if (snapshot.hasError) {                return ListTile(                  title: Text("${snapshot.error}"),                );              }              if (!snapshot.hasData) {                return const ListTile(                  title: Center(child: CircularProgressIndicator()),                );              }              return ListTile(                title: Text("${snapshot.data}"),              );            },          );        },      ),    );  }}